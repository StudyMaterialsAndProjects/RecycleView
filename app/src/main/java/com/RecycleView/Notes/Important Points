RecycleView
----------
In earlier android we were using Custom Base Adapter for showing the list of items.
We can display the collection of Strings,collection of java Objects in the item.

To Bridge a gap that is converting the Non-UI  elements to UI elemts we will use a Adapter.
i.e to show the list of Strings to list of items.


The main Reason switching from ArrayAdapter to Base Adapter is
In ArrayAdapter we can show only String type Arrays.
If we want to show Object type non-Ui elements into UI elements then we should go for Base Adapter.

Disadvantages of Using Base Adapter.

Here the View is getting inflated every time when we scroll.
Each time creating a new View Object.Can be observed in the Log.
we can verify it by adding a set for verification.

There is no Documenatation that why the getView() method will be executed so many times.
Google Io link for that getView() method executing multiple times as suggested by google-->https://www.youtube.com/watch?v=wDBM6wVEO70
getView()  method will be executed a couple of times depending on how the widgets are alligned in the layout.


OverComing the getView() findViewbyId Executing again and again.

This can be overcomed by using View Holder Desin pattern in BaseAdapter.
View Holder Design pattern means making a separate class which holds all the individual views which are present in the layout.
By using this Design pattern we can increase the Frames per second execution.
In Video 4 at @ 5:30 we can see the performance how fast it can be made using ViewHolder Design pattern.



Reason for Shifting from BaseAdapter to RecycleView:-

1)List View were becoming more and more complicated.
2)Recycling of views was not supported in the BaseAdapter,we need to implement as out of box feature in base Adapter.
3)Data Binding in the Base Adapter was very primitive.(Developer needs to manage everything ,by default feature was not suppported).
4)Animations on row items of ListView was cubersome(As adding the item and delete and update the items was very difficult in ListView).
5)There is option for changing the postioning of row items in the listView.

Features in the RecycleView:-
1)Introduced View Holder Desgin pattern as build in feature RecycleVeiw.
2)View Holder will be Central to reuse and recycle feature.
3)separation of View Creation and DataBinding will be taken care.when compared in the base adapter ViewCreation and Data Binding are done the programmer
as seen from the screenshot.(ViewCreation_DataBinding).These 2 operation are in a single method getView() in RecycleView its avoided.
4)Efficient handling of the row items click and position handling of the items in the recycleView.


Steps for construction of RecycleView:-
1)Add the material depedency in build.gradle.
2)Create a class which extends RecyclerView.Adapter<(MainClassName.InnerClass)> with Generic type having innner class.
3)Inner class should extend RecycleView.Holder.And the constructor must be provided for the inner class with super keyword.

Intial Steps for intialization of th RecycleView.(Important Points).
************************************************
1)Intialize the adapter.
2)Use the layout manager to set the layout to the recycleView.(Layout Manager helps you to align these layout in the RecycleView)
3)User RecycleView to set the adapter.
************************************************

Layout Managers:-
Android Supports 3 types of Layout Managers
1)Linera layout managers.
2)Grid layout Managers.
3)Staggered Grid layout Managers.


Linear Layout Manager:-
a)LinearLayoutManager linearLayoutManager=new LinearLayoutManager(this);
   Normal Linear layout Managers.
b)LinearLayoutManager linearLayoutManager=new LinearLayoutManager(this,RecyclerView.HORIZONTAL,false);
   Arguments:- context,orientation,"True-->layout will get reversed,False -->layout will be normal"
c)Grid Layout Managers:-
   GridLayoutManager gridLayoutManager=new GridLayoutManager(this,2);
   Arguments:-First arguments is context,second Argument is span i.e no of different rows u can have in the screen. Here the orientation is by default vertical.

   If we want to change the orientation then we need to pass the 3 rd arguments.
   GridLayoutManager gridLayoutManager=new GridLayoutManager(this,2,GridLayoutManager.HORIZONTAL,false);
    arguments:- context,row count,Orientation,"want the layout to be reverse or not"

    Working with the spanSize, i.e row count.
